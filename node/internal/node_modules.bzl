
def _get_filename_relative_to_module(module, file):
    parts = file.path.partition("/%s/" % module.name)
    return '/'.join(parts[1:])


def _copy_module(ctx, target_dir, module):
    if len(module.files) == 0:
        return []

    inputs = []
    outputs = []

    script_file = ctx.new_file('%s/copy_%s.sh' % (ctx.label.name, module.identifier))
    #script_file = ctx.new_file('copy_%s.sh' % (module.identifier))
    script_lines = []

    for src in module.files:
        inputs.append(src)
        dst_filename = _get_filename_relative_to_module(module, src)
        dst = ctx.new_file('%s/node_modules/%s' % (target_dir, dst_filename))
        outputs.append(dst)
        script_lines.append("cp '%s' '%s'" % (src.path, dst.path))

    ctx.file_action(
        output = script_file,
        content = '\n'.join(script_lines),
        executable = True,
    )

    ctx.action(
        mnemonic = 'CopyModuleWith%sFiles' % len(outputs),
        inputs = inputs + [script_file],
        outputs = outputs,
        command = script_file.path,
    )

    return outputs


def _copy_modules(ctx, target_dir, deps):
    outputs = []
    for dep in deps:
        module = dep.node_module
        outputs += _copy_module(ctx, target_dir, module)
        for module in module.transitive_deps:
            outputs += _copy_module(ctx, target_dir, module)
    return outputs

    
def node_modules_impl(ctx):
    #target_dir = ctx.label.name + '.node_modules'
    target_dir = ctx.attr.target
    files = _copy_modules(ctx, target_dir, ctx.attr.deps)
    manifest = ctx.new_file('%s/node_modules/manifest.json' % target_dir)
    files.append(manifest)

    modules = []
    for dep in ctx.attr.deps:
        module = dep.node_module
        modules.append(module)
        for m in module.transitive_deps:
            modules.append(m)

    json = {}
    dependencies = {}
    for module in modules:
        dependencies[module.name] = module.version
        json['dependencies'] = struct(**dependencies)

    manifest_content = struct(**json)

    ctx.file_action(
        output = manifest,
        content = manifest_content.to_json(),
    )

    return struct(
        files = depset(files),
        node_modules = struct(
            files = files,
            modules = depset(modules),
            manifest = manifest,
        )
    )


node_modules = rule(
    node_modules_impl,
    attrs = {
        'deps': attr.label_list(
            providers = ['node_module'],
        ),
        'target': attr.string(
            mandatory = True,
        ),
    }
)
